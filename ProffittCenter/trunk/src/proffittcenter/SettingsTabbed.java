/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SettingsTabbed.java
 *
 * Created on 20 MFómh 2010, 17:22:29
 */

package proffittcenter;

import java.awt.Cursor;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Currency;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.help.HelpBroker;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Dave
 */
public class SettingsTabbed extends EscapeDialog {

    Preferences root = Preferences.userNodeForPackage(getClass());
    public String serverName ;//= root.get("ServerName", "localhost");//www.proffittcenter.org
    public String database ;//= root.get("Database", "till");//till proff2_till
    public String userName ;//= root.get("UserName", "root");//root proff2_test
    public String password ;//= root.get("Password", "");//1234
    Currency currency = Currency.getInstance(Locale.getDefault());
    public String poundSymbol ;//= java.util.Currency.getInstance(Locale.getDefault()).getSymbol();//root.get("PoundSymbol", "�");
    private String pennySymbol ;//= root.get("PennySymbol", "p");
    public Integer minimumDebit;// = Integer.parseInt(root.get("MinimumDebit", "500"));
    private int operator;// = Integer.parseInt(root.get("Operator", "0"));
    public String tax;// = root.get("Tax", "Registered");
    public String companyName;// = root.get("CompanyName", "ProffittCenter");
    public String companyAddress;// = root.get("CompanyAddress", "9 Invicta Road");
    public String companyPhone;// = root.get("CompanyPhone", "01795 581467");
    public String companyTaxID;// = root.get("CompanyTaxID", "01234567");
    private Integer extraLines;// = Integer.parseInt(root.get("ExtraLines", "6"));
    private int cor;// = Integer.parseInt(root.get("CharsOnReceipt", "33"));
    private Integer charsOnReceipt;// = cor < 20 ? 20 : cor;
    private String receiptPort;// = root.get("ReceiptPort", "");
    private String polePort;// = root.get("PolePort", "");
    private String barcodePrinter;// = root.get("BarcodePrinter", "");
    private boolean invoicePrinter;// = root.getBoolean("InvoicePrinter", false);
    public String charset;// = root.get("Charset", "Cp850");
    public Boolean receiptAlways;// = Boolean.parseBoolean(root.get("ReceiptAlways", "false"));
    public boolean videoRental;// = Boolean.parseBoolean(root.get("VideoRental", "false"));
    public int selectedDepartment = Integer.parseInt(root.get("SelectedDepartment", "0"));
    public int authority = 0;
    public static final int OWNER = 0;
    public static final int MANAGER = 1;
    public static final int TRAINEE = 5;
    public String selectedDepartmentDescription = root.get("SelectedDepartmentDescription", "");
//    private boolean jasperInMyDocuments;// = true;
    public String operatorName = "";
    public static final int REGISTERED = 0;
    public static final int WHOLESALE = 1;
    public static final int SALESTAX = 3;
    private Regime regimeIs;
    String regime;
    private final int creating = 0;
    boolean returnValue = false;
    private int minimumValue;
    private int shelfEdgeLabelHeight;
    private byte code;
    public String myLanguage;
    static ResourceBundle bundle = ResourceBundle.getBundle("proffittcenterworkingcopy/resource/Settings");
    public boolean internetEnabled = root.getBoolean("InternetEnabled", false);
    public String backupUser = root.get("backupUser", "");
    public String backupPassword = root.get("backupPassword", "");
    public String backupLocation = root.get("backupLocation", "");
    private HelpBroker hb;
    public int fixedFloat = 0;
//    private int shiftFloat = 0;//in pence
    public final String myCountry="";
    public static int floatID = 0;
    public static Timestamp startOfSession;
    public static final int DEFAULTSUPPLIER=1;
    private boolean operatorOveride;
    private int operatorOveridden;
    private static boolean resetWindows;
    public boolean touch=root.getBoolean("Touch", false);
    private boolean show;

    /** Creates new form SettingsTabbed */
    public SettingsTabbed(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jTabbedPane1.addTab("Server",Main.server);
        jTabbedPane1.addTab("Hardware",Main.hardware);
        jTabbedPane1.addTab("Shop",Main.shop); 
        Main.mainHelpBroker.enableHelpKey(getRootPane(), "Settings", Main.mainHelpSet);
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        okBtn = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jHelpButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("proffittcenterworkingcopy/resource/Settings"); // NOI18N
        setTitle(bundle.getString("Settings.title")); // NOI18N
        setName(bundle.getString("Settings.title")); // NOI18N

        jTabbedPane1.setName("settingsTabbed"); // NOI18N
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        okBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenterworkingcopy/resource/OK.png"))); // NOI18N
        okBtn.setToolTipText(bundle.getString("OK")); // NOI18N
        okBtn.setContentAreaFilled(false);
        okBtn.setName("okBtn"); // NOI18N
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenterworkingcopy/resource/Close24.png"))); // NOI18N
        closeButton.setToolTipText(bundle.getString("CloseButton")); // NOI18N
        closeButton.setContentAreaFilled(false);
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenterworkingcopy/resource/Help.png"))); // NOI18N
        jHelpButton.setToolTipText(bundle.getString("Help")); // NOI18N
        jHelpButton.setContentAreaFilled(false);
        jHelpButton.setName("jHelpButton"); // NOI18N
        jHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHelpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jHelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 882, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jHelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        int i=jTabbedPane1.getModel().getSelectedIndex();
//        setVisible(true);
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        //Properties p = new Properties();
        returnValue = false;
        if(!Main.server.ok()){
            okBtn.setEnabled(false);
                return;
        }
        if(!Main.hardware.ok()){
            return;
        }
        if(!Main.shop.ok()){
            return;
        }
        String oldTill = root.get("Database", "till");
        if(Serial.RECEIPTPORT!=null){
            Serial.RECEIPTPORT.closePort();
        }
        if(Serial.POLEPORT!=null){
            Serial.POLEPORT.closePort();
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if(!show&&Main.salesScreen!=null){
            Main.salesScreen.makeKeyboardVisible();
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        System.exit(0);
        this.setVisible(false);
}//GEN-LAST:event_okBtnActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        returnValue = false;
        setVisible(false);
}//GEN-LAST:event_closeButtonActionPerformed

    private void jHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHelpButtonActionPerformed
        Main.csh.actionPerformed(evt);
    }//GEN-LAST:event_jHelpButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SettingsTabbed dialog = new SettingsTabbed(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton jHelpButton;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton okBtn;
    // End of variables declaration//GEN-END:variables

    public boolean execute(boolean show) {        
        okBtn.setEnabled(true);
        if (show) {
            Main.server.execute();
             JFrame parent;     
            parent = new JFrame();
//            JOptionPane.showMessageDialog(parent, "server");
            Main.hardware.execute();
//            JOptionPane.showMessageDialog(parent, "hardware");
            Main.shop.execute();
//            JOptionPane.showMessageDialog(parent, "shop");
        }
        if (Main.splashFrame != null) {
            Main.splashFrame.dispose();
            Main.splashFrame = null;//in case we generate a second salesscreen
        }
        if (show) {
            Audio.play("Tada");
            setVisible(true);
        }
        return returnValue;
    }
    

    public void setOperator(int operator) {
        this.operator = operator;
    }
    
    Object getBarcodePrinter() {
        return barcodePrinter;
    }

    void setOkBtn(boolean b) {
        okBtn.setEnabled(b);
    }
    
    /**
     * 
     * @return true if an owner or a manager
     */
    public boolean isOwnerManager() {
        if (authority <= 1) {
            return true;
        }
        //allow Ownermanager to log in here
        Audio.play("TaDa");
        String s = JOptionPane.showInputDialog(bundle.getString("ManagerLogIn"));
        if(s==null||s.isEmpty()){
            Main.salesScreen.setNoIncrement(true);
            return false;
        }
        s = StringOps.numericOnly(s);
        String ops = "SELECT * FROM Operators WHERE ID=? ";
        try {
            PreparedStatement operatorQuery =
                    Main.getConnection().prepareStatement(ops);
            ResultSet rs;
            long op = 0;
            op = Long.valueOf(s);
            op -= SaleType.OPERATOR.code() * 10000;
            operatorQuery.setLong(1, op);
            rs = operatorQuery.executeQuery();
            if (rs.first()) {
                int a = rs.getInt("Authority");
                if(a<=1){
                    rs.close();
                    return true;
                }
            }
            rs.close();
        } catch (Exception ex) {
            Main.logger.log(Level.SEVERE, "Settings.opsr ", "Exception: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "ops", "Exception: " + ex, JOptionPane.ERROR_MESSAGE);
        }
        Main.salesScreen.setNoIncrement(true);
        return false;
    }
    
    public Regime regimeIs() {
        return regimeIs;
    }

    public String getPennySymbol() {
        return pennySymbol;
    }
    
    public int getShelfEdgeLabelHeight() {
        return shelfEdgeLabelHeight;
    }
    
    /**
     * @return the extraLines
     */
    public Integer getExtraLines() {
        return extraLines;
    }

    /**
     * @return the invoicePrinter
     */
    public boolean isInvoicePrinter() {
        return invoicePrinter;
    }
    
    public static boolean isResetWindows() {
        return resetWindows;
    }
    
    /**
     * @return the charsOnReceipt
     */
    public Integer getCharsOnReceipt() {
        return charsOnReceipt;
    }
    
     /**
     * @return the code
     */
    public byte getCode() {
        return code;
    }
 /**
     * @return the receiptPort
     */
    public String getReceiptPort() {
        return receiptPort;
    }

    /**
     * @param receiptPort the receiptPort to set
     */
    public void setReceiptPort(String receiptPort) {
        this.receiptPort = receiptPort;
        root.put("ReceiptPort", receiptPort);
    }

    /**
     * @return the polePort
     */
    public String getPolePort() {
        return polePort;
    }

    public boolean getWasOverridden(){
        return operatorOveride;
    }

    /**
     * @return the operator
     */
    public int getOperator() {
        if(operatorOveride){
            operatorOveride=false;
            return operatorOveridden;
        }
        return operator;
    }

    /**
     *
     * @return true if a sales person
     */
   boolean isSalesPerson() {
        return authority <= 4;
    }
    
}
