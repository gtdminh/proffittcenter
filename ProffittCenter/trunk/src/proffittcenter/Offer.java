/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OfferEscape.java
 *
 * Created on 03-Nov-2009, 13:25:38
 */
package proffittcenter;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.util.Calendar;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;

/**
 *
 * @author HP_Owner
 */
public class Offer extends EscapeDialog {

    Preferences root = Preferences.userNodeForPackage(getClass());
    ResourceBundle bundle = ResourceBundle.getBundle("proffittcenter/resource/Offer");
    public static final int PACK = 1;
    public static final int QUANTITY = 2;
    public static final int BIN = 2;
    Long barCode;
    int ix;
    private int kind;
    private Long product;
    private short offerType;
    private java.sql.Date startDate;
    private java.sql.Date endDate;
    private int y;
    private int x;
    private Integer limit;
    private Calendar startCal;
    private Calendar endCal;
    private int kindIndex;
    private Integer quantity;
    private boolean addPressed;
    private int price;

    /** Creates new form OfferEscape
     * @param parent
     * @param modal
     */
    public Offer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Main.mainHelpBroker.enableHelpKey(getRootPane(), "Offer", Main.mainHelpSet);
        getRootPane().setDefaultButton(okButton);
    }

    private boolean checkProduct() throws SQLException {
        //now need to check till/product table
        PreparedStatement productLookup = Main.getConnection().prepareStatement(
                "SELECT Products.*" + "FROM Products " + " WHERE Products.ID=? ");
        productLookup.setLong(1, barCode);
        ResultSet rs = productLookup.executeQuery();
        if (!rs.first()) {
            //no product
            rs.close();
            return false;
        } else {
            descriptionText.setText(rs.getString("Description"));
            kind = kindCombo.getSelectedIndex();
            price = rs.getInt("Price");
            if (price == 1 || price == 0) {
                //don't allow penny or zero priced items
                return false;
            }
            if (kind == 2) {//discount
                productPriceText.setText((new Money(price)).toString());
            } else {
                productPriceText.setText((new Money(price)).toString());
            }
            quantitySpinner.requestFocus();
            Audio.play("Beep");
            rs.close();
            return true;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        startChooser = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        endChooser = new com.toedter.calendar.JDateChooser();
        productText = new javax.swing.JTextField();
        offerPriceText = new javax.swing.JTextField();
        addProductButton = new javax.swing.JButton();
        kindCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        descriptionText = new javax.swing.JTextField();
        limitSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        productPriceText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        closeBtn = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("proffittcenter/resource/Offer"); // NOI18N
        setTitle(bundle.getString("Offer.title")); // NOI18N
        setName("Offer"); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText(bundle.getString("Offer.jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText(bundle.getString("Offer.jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        startChooser.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        startChooser.setName("startChooser"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText(bundle.getString("Offer.jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        endChooser.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        endChooser.setName("endChooser"); // NOI18N

        productText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productText.setName("productText"); // NOI18N
        productText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                productTextFocusLost(evt);
            }
        });
        productText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productTextKeyReleased(evt);
            }
        });

        offerPriceText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        offerPriceText.setName("offerPriceText"); // NOI18N
        offerPriceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                offerPriceTextKeyReleased(evt);
            }
        });

        addProductButton.setBorderPainted(false);
        addProductButton.setContentAreaFilled(false);
        addProductButton.setName("addProductButton"); // NOI18N
        addProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductButtonActionPerformed(evt);
            }
        });

        kindCombo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        kindCombo.setName("kindCombo"); // NOI18N
        kindCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kindComboActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText(bundle.getString("Offer.jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        quantitySpinner.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        quantitySpinner.setName("quantitySpinner"); // NOI18N
        quantitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantitySpinnerStateChanged(evt);
            }
        });

        descriptionText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        descriptionText.setName("descriptionText"); // NOI18N

        limitSpinner.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        limitSpinner.setName("limitSpinner"); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText(bundle.getString("Offer.jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        productPriceText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productPriceText.setFocusable(false);
        productPriceText.setName("productPriceText"); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(bundle.getString("Offer.jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText(bundle.getString("Offer.jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        closeBtn.setBorderPainted(false);
        closeBtn.setContentAreaFilled(false);
        closeBtn.setName("closeBtn"); // NOI18N
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        okButton.setContentAreaFilled(false);
        okButton.setName("okButton"); // NOI18N
        okButton.setSelected(true);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(1062, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText(bundle.getString("Offer.jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText(bundle.getString("Offer.jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionText, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                            .addComponent(quantitySpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                            .addComponent(limitSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                            .addComponent(offerPriceText, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                            .addComponent(productPriceText, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                            .addComponent(endChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                            .addComponent(startChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(kindCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(productText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addProductButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kindCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(addProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(productText)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limitSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(offerPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)))
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productTextFocusLost
        String data = productText.getText();
        if (data.length() == 1 && (data.charAt(0) >= 'a' && data.charAt(0) <= 'z' || data.charAt(0) >= 'A' && data.charAt(0) <= 'Z')) {
            //data is a hot key
            int n = 1; //n is the multiplyer, default to 1
            data = data.toUpperCase();
            char c = data.charAt(0);
            barCode = c - 65L + 1000001L;
            if (data.length() > 1) {
                try {
                    n = Integer.parseInt(data.substring(1));
                } catch (NumberFormatException ex) {
                    productText.setText("");
                    productText.requestFocus();
                    return;
                }
            }
            data = "" + barCode;
            productText.setText(data);
        }
        if (data.length() == 0 || data.length() < 7) {
            return; //8 or more digits
        } //8 or more digits
        try {
            barCode = Long.parseLong(data);
        } catch (NumberFormatException ex) {
            return;
        }
        if (barCode < 100000) {
            barCode = 0L; //do not leave with a value
            return; //not big enough to be a bar code
        }
        try {
            if (!checkProduct()) {
                productText.setText("");
                productText.requestFocus();
                Audio.play("Ring");
            }
        } catch (SQLException ex) {
            Audio.play("Ring");
            Logger.getLogger(Offer.class.getName()).log(Level.SEVERE, null, ex);
        }
        Audio.play("Beep");
        getRootPane().setDefaultButton(okButton);
    }//GEN-LAST:event_productTextFocusLost

    private void productTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productTextKeyReleased
        String data = productText.getText();
        productText.setBackground(Color.lightGray);
        productText.setBackground(Color.WHITE);
        if (data.length() == 3) {
            if (Main.alphaLookup.isBarcode(data)) {
                return;
            }
            if (Main.alphaLookup.isFound(data)) {
                productText.setText(Main.alphaLookup.returnDataIs());
                descriptionText.requestFocus();
            } else {
                productText.setText("");
                descriptionText.setText("");
                productPriceText.setText("");
            }
        }
        int jj=evt.getKeyCode();
        int jjj=data.length() ;
        if (data.length() == 1 && evt.getKeyCode() == KeyEvent.VK_ADD) {
            //this product is being added to an offer
            //so fill in price, limit, dates and offer id
            limitSpinner.setValue(limit);
            offerPriceText.setText((new Money(y).toString()));
            kindCombo.setSelectedIndex(kindIndex);
            quantitySpinner.setValue(quantity);
            startChooser.setCalendar(startCal);
            endChooser.setCalendar(endCal);
            addPressed = true;
            productText.setText("");
            productText.requestFocus();
        }
        getRootPane().setDefaultButton(okButton);
    }//GEN-LAST:event_productTextKeyReleased

    private void offerPriceTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_offerPriceTextKeyReleased
        kind = kindCombo.getSelectedIndex();
        if (kind == 2) {//discount
        } else {
            Money.asMoney(offerPriceText);
        }
        getRootPane().setDefaultButton(okButton);
    }//GEN-LAST:event_offerPriceTextKeyReleased

    private void addProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductButtonActionPerformed
        //this product is being added to an offer
        //so fill in price, limit, dates and offer id
        limitSpinner.setValue(limit);
        offerPriceText.setText((new Money(y).toString()));
        kindCombo.setSelectedIndex(kindIndex);
        quantitySpinner.setValue(quantity);
        startChooser.setCalendar(startCal);
        endChooser.setCalendar(endCal);
        addPressed = true;
        productText.setText("");
        productText.requestFocus();
        getRootPane().setDefaultButton(okButton);
    }//GEN-LAST:event_addProductButtonActionPerformed

    private void kindComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kindComboActionPerformed
        kind = kindCombo.getSelectedIndex();
        switch (kind) {
            case 0:
            Main.mainHelpBroker.enableHelpKey(getRootPane(), "Offer", Main.mainHelpSet);
            this.setTitle(bundle.getString("Offer.title"));
            jLabel6.setText(bundle.getString("Offer.jLabel6.text"));
            break;
            case Offer.QUANTITY:
            Main.mainHelpBroker.enableHelpKey(getRootPane(), "Quantitydiscounts", Main.mainHelpSet);
            this.setTitle(bundle.getString("QuantityDiscount"));
            jLabel6.setText(bundle.getString("Discount") + " " + (Integer) quantitySpinner.getValue() + ": (%)");
            break;
            case Offer.PACK:
            Main.mainHelpBroker.enableHelpKey(getRootPane(), "Packoffers", Main.mainHelpSet);
            this.setTitle(bundle.getString("Pack"));
            jLabel6.setText(bundle.getString("Offer.jLabel6.text"));
            jLabel6.setText(bundle.getString("Offer.jLabel6.text") + ": " + (Integer) quantitySpinner.getValue() + " ");
            break;
            default:
            Main.mainHelpBroker.enableHelpKey(getRootPane(), "Offer", Main.mainHelpSet);
            this.setTitle(bundle.getString("Offer.title"));
            jLabel6.setText(bundle.getString("Offer.jLabel6.text"));
            break;
        }
        getRootPane().setDefaultButton(okButton);
    }//GEN-LAST:event_kindComboActionPerformed

    private void quantitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantitySpinnerStateChanged
        if (kind == PACK) {
            jLabel6.setText(bundle.getString("Offer.jLabel6.text") + ": " + (Integer) quantitySpinner.getValue() + " ");
        } else if (kind == QUANTITY) {
            jLabel6.setText(bundle.getString("Discount") + " " + (Integer) quantitySpinner.getValue() + ": (%)");
        }
        getRootPane().setDefaultButton(okButton);
    }//GEN-LAST:event_quantitySpinnerStateChanged

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeBtnActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // check for filled in data
        if (productText.getText().isEmpty() || descriptionText.getText().isEmpty()) {
            productText.requestFocus();
            return;
        } else if (kindCombo.getSelectedIndex() == 0) {
            kindCombo.requestFocus();
            return;
        } else if (offerPriceText.getText().isEmpty()) {
            offerPriceText.requestFocus();
            return;
        }
        startCal = startChooser.getCalendar();
        endCal = endChooser.getCalendar();
        startDate = new java.sql.Date(startCal.getTimeInMillis());
        endDate = new java.sql.Date(endCal.getTimeInMillis());
        //insert offer
        try {
            if (!addPressed) {
                PreparedStatement nf = Main.getConnection().prepareStatement(
                    "SELECT IX,MAX(IX) FROM OFFERS " + "GROUP BY IX " + "ORDER BY IX DESC");
                ResultSet rs = nf.executeQuery();
                if (!rs.first()) {
                    ix = 1;
                } else {
                    ix = rs.getInt("IX") + 1;
                }
                rs.close();
            }
            addPressed = false;
            PreparedStatement np = Main.getConnection().prepareStatement(
                "INSERT INTO Offers(ID,IX,Product,X,Y,OfferType,StartDate,EndDate," + "Discounted,Included,Z,Normal,LimitValue) VALUES(?,?,?,?,?,?,?,?,0,0,0,0,?)");
            np.setNull(1, java.sql.Types.NULL); //id
            np.setInt(2, ix); //ix is the index for the offer
            np.setLong(3, barCode); //product
            quantity = (Integer) quantitySpinner.getValue();
            np.setInt(4, quantity); //X
            y = Integer.parseInt(StringOps.numericOnly(offerPriceText.getText())); //price=y
            np.setInt(5, y);
            kindIndex = kindCombo.getSelectedIndex();
            np.setInt(6, kindCombo.getSelectedIndex()); //kind
            np.setDate(7, startDate);
            np.setDate(8, endDate);
            limit = (Integer) limitSpinner.getValue();
            np.setInt(9, (Integer) limitSpinner.getValue());
            np.executeUpdate();
            quantitySpinner.setValue(2);
            limitSpinner.setValue(0);
            offerPriceText.setText("");
            productPriceText.setText("");
            kindCombo.setSelectedIndex(0);
            Calendar c = Calendar.getInstance();
            startChooser.setCalendar(c);
            c.add(Calendar.WEEK_OF_YEAR, 1);
            endChooser.setCalendar(c);
        } catch (SQLException ex) {
            Logger.getLogger(Offer.class.getName()).log(Level.SEVERE, null, ex);
            Audio.play("Ring");
        }
        Audio.play("Beep");
        addProductButton.setVisible(true);
        productText.setText("");
        productText.requestFocus();
        descriptionText.setText("");
        offerPriceText.setText("");
        productPriceText.setText("");
    }//GEN-LAST:event_okButtonActionPerformed

    public boolean execute() {
        addPressed = false;
        productText.setText("");
        descriptionText.setText("");
        quantitySpinner.setValue(2);
        limitSpinner.setValue(0);
        offerPriceText.setText("");
        productPriceText.setText("");
        Calendar c = Calendar.getInstance();
        startChooser.setCalendar(c);
        c.add(Calendar.WEEK_OF_YEAR, 1);
        endChooser.setCalendar(c);
        kindCombo.removeAllItems();
        kindCombo.addItem("");
        kindCombo.addItem(bundle.getString("Pack"));
        kindCombo.addItem(bundle.getString("QuantityDiscount"));
        kindIndex = 0;
        kindCombo.setSelectedIndex(0);
        kindCombo.requestFocus();
        okButton.setVisible(true);
        Audio.play("Tada");
        getRootPane().setDefaultButton(okButton);
        setVisible(true);
        //FormRestore.destroyPosition(this, root);
        return true;
    }

    public boolean execute(int offer) {
        try {
            //get parameters fof existing offer
            ix = offer;
            kindCombo.removeAllItems();
            kindCombo.addItem("");
            kindCombo.addItem(bundle.getString("Pack"));
            kindCombo.addItem(bundle.getString("QuantityDiscount"));
            String details = "SELECT Offers.*,Products.Description FROM Offers,Products WHERE IX=? AND Offers.Product=Products.ID ORDER BY ID";
            PreparedStatement ps = Main.getConnection().prepareStatement(details);
            ps.setInt(1, offer);
            ResultSet rs = ps.executeQuery();
            if (rs.first()) {
                offerType = rs.getShort("OfferType");
                startDate = rs.getDate("StartDate");
                startChooser.setDate(startDate);
                endDate = rs.getDate("EndDate");
                endChooser.setDate(endDate);
                int jj=rs.getInt("OfferType");
                kindCombo.setSelectedIndex(rs.getInt("OfferType"));
                quantitySpinner.setValue(rs.getInt("X"));
                limitSpinner.setValue(rs.getInt("LimitValue"));
                offerPriceText.setText((new Money(rs.getInt("Y"))).toString());
                okButton.setVisible(true);
                addProductButton.setVisible(false);
                productText.requestFocus();
                addPressed = true;
            } else {
                return false;
            }
            getRootPane().setDefaultButton(okButton);
            setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Offer.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Offer dialog = new Offer(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProductButton;
    private javax.swing.JButton closeBtn;
    private javax.swing.JTextField descriptionText;
    private com.toedter.calendar.JDateChooser endChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox kindCombo;
    private javax.swing.JSpinner limitSpinner;
    private javax.swing.JTextField offerPriceText;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField productPriceText;
    private javax.swing.JTextField productText;
    private javax.swing.JSpinner quantitySpinner;
    private com.toedter.calendar.JDateChooser startChooser;
    // End of variables declaration//GEN-END:variables
}
