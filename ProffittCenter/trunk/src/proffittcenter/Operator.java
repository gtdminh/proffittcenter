/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OperatorEscape.java
 *
 * Created on 28-Oct-2009, 19:06:12
 */

package proffittcenter;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import net.sourceforge.barbecue.Barcode;
import net.sourceforge.barbecue.BarcodeException;
import net.sourceforge.barbecue.BarcodeFactory;
import net.sourceforge.barbecue.BarcodeImageHandler;
import net.sourceforge.barbecue.output.OutputException;

/**
 *
 * @author HP_Owner
 */
public class Operator extends EscapeDialog implements Printable {
    Preferences root = Preferences.userNodeForPackage(getClass());
    private String description;
    private String ids;
    static ResourceBundle bundle = ResourceBundle.getBundle("proffittcenter/resource/Operator");
    private int overriddenOperator;
    private boolean operatorOveride;
    private int operator;
    public String operatorName;
    public boolean enterStock;
    public boolean createNewStock;
    private boolean noSale;
    private boolean acceptDebit;
    private boolean overrideDebit;
    private boolean stockTake;
    private boolean deliveries;
    public boolean refunds;
    private boolean viewSales;
    private int data;
    public boolean handleAccounts;
    public boolean handleOrders;
    public boolean handleOffers;
    private boolean modifyOperators;
    private boolean modifyOffers;
    private boolean changeCreditLimits;
    public static final int OWNER=0;
    public static final int MANAGER=1;
    public static final int SENIOR=2;
    public static final int JUNIOR=3;
    public static final int TRAINEE=4;
    public static final int LOCKEDOUT=5;
    public static final int SALESPERSON=3;
    private int intAuthority=LOCKEDOUT;
    private int overridenAuthority;
    private boolean cashup;
    private boolean enterProductTables;
    private boolean priceChange;

    /** Creates new form OperatorEscape */
    public Operator(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Main.mainHelpBroker.enableHelpKey(getRootPane(), "Operator", Main.mainHelpSet);
        JRootPane rp = getRootPane();
        rp.setDefaultButton(okBtn);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jId = new javax.swing.JTextField();
        jDescription = new javax.swing.JTextField();
        authorityCombo = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        closeButton2 = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();
        jPrintButton = new javax.swing.JButton();
        enterStockCheckBox = new javax.swing.JCheckBox();
        createNewStockCheckBox = new javax.swing.JCheckBox();
        acceptDebitCards = new javax.swing.JCheckBox();
        noSaleCheckBox = new javax.swing.JCheckBox();
        refundsCheckBox = new javax.swing.JCheckBox();
        deliveriesCheckBox = new javax.swing.JCheckBox();
        overrideDebitLimit = new javax.swing.JCheckBox();
        stockTakeCheckBox = new javax.swing.JCheckBox();
        modifyOffersCheckBox = new javax.swing.JCheckBox();
        modifyOperatorsCheckBox = new javax.swing.JCheckBox();
        cashupCheckBox = new javax.swing.JCheckBox();
        changeCreditLimitsCheckBox = new javax.swing.JCheckBox();
        handleOffersCheckBox = new javax.swing.JCheckBox();
        handleOrdersCheckBox = new javax.swing.JCheckBox();
        handleAccountsCheckBox = new javax.swing.JCheckBox();
        viewSalesCheckBox = new javax.swing.JCheckBox();
        enterProductTablesCheckBox = new javax.swing.JCheckBox();
        priceChangeCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("proffittcenter/resource/Operator"); // NOI18N
        setTitle(bundle.getString("Operator.title")); // NOI18N
        setName("Operator"); // NOI18N

        jId.setEditable(false);
        jId.setFocusable(false);
        jId.setName("jId"); // NOI18N

        jDescription.setName("jDescription"); // NOI18N
        jDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jDescriptionKeyReleased(evt);
            }
        });

        authorityCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Owner", "Manager", "Senior staff", "Junior staff", "Trainee", "Locked out" }));
        authorityCombo.setName("authorityCombo"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setName("jPanel1"); // NOI18N

        closeButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/Close24.png"))); // NOI18N
        closeButton2.setBorderPainted(false);
        closeButton2.setContentAreaFilled(false);
        closeButton2.setName("closeButton2"); // NOI18N
        closeButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButton2ActionPerformed(evt);
            }
        });

        okBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/OK.png"))); // NOI18N
        okBtn.setBorderPainted(false);
        okBtn.setContentAreaFilled(false);
        okBtn.setName("okBtn"); // NOI18N
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        jPrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/print_edit.gif"))); // NOI18N
        jPrintButton.setText("null");
        jPrintButton.setBorderPainted(false);
        jPrintButton.setContentAreaFilled(false);
        jPrintButton.setName("jPrintButton"); // NOI18N
        jPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrintButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPrintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jPrintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(okBtn, javax.swing.GroupLayout.Alignment.TRAILING, 0, 22, Short.MAX_VALUE)
                            .addComponent(closeButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))))
                .addContainerGap())
        );

        enterStockCheckBox.setText(bundle.getString("Operator.enterStockCheckBox.text")); // NOI18N
        enterStockCheckBox.setName("enterStockCheckBox"); // NOI18N

        createNewStockCheckBox.setText(bundle.getString("Operator.createNewStockCheckBox.text")); // NOI18N
        createNewStockCheckBox.setName("createNewStockCheckBox"); // NOI18N

        acceptDebitCards.setText(bundle.getString("Operator.acceptDebitCards.text")); // NOI18N
        acceptDebitCards.setName("acceptDebitCards"); // NOI18N

        noSaleCheckBox.setText(bundle.getString("Operator.noSaleCheckBox.text")); // NOI18N
        noSaleCheckBox.setName("noSaleCheckBox"); // NOI18N

        refundsCheckBox.setText(bundle.getString("Operator.refundsCheckBox.text")); // NOI18N
        refundsCheckBox.setName("refundsCheckBox"); // NOI18N

        deliveriesCheckBox.setText(bundle.getString("Operator.deliveriesCheckBox.text")); // NOI18N
        deliveriesCheckBox.setName("deliveriesCheckBox"); // NOI18N

        overrideDebitLimit.setText(bundle.getString("Operator.overrideDebitLimit.text")); // NOI18N
        overrideDebitLimit.setName("overrideDebitLimit"); // NOI18N

        stockTakeCheckBox.setText(bundle.getString("Operator.stockTakeCheckBox.text")); // NOI18N
        stockTakeCheckBox.setName("stockTakeCheckBox"); // NOI18N

        modifyOffersCheckBox.setText(bundle.getString("Operator.modifyOffersCheckBox.text")); // NOI18N
        modifyOffersCheckBox.setName("modifyOffersCheckBox"); // NOI18N

        modifyOperatorsCheckBox.setText(bundle.getString("Operator.modifyOperatorsCheckBox.text")); // NOI18N
        modifyOperatorsCheckBox.setName("modifyOperatorsCheckBox"); // NOI18N

        cashupCheckBox.setText(bundle.getString("Operator.cashupCheckBox.text")); // NOI18N
        cashupCheckBox.setName("cashupCheckBox"); // NOI18N

        changeCreditLimitsCheckBox.setText(bundle.getString("Operator.changeCreditLimitsCheckBox.text")); // NOI18N
        changeCreditLimitsCheckBox.setName("changeCreditLimitsCheckBox"); // NOI18N

        handleOffersCheckBox.setText(bundle.getString("Operator.handleOffersCheckBox.text")); // NOI18N
        handleOffersCheckBox.setName("handleOffersCheckBox"); // NOI18N

        handleOrdersCheckBox.setText(bundle.getString("Operator.handleOrdersCheckBox.text")); // NOI18N
        handleOrdersCheckBox.setName("handleOrdersCheckBox"); // NOI18N

        handleAccountsCheckBox.setText(bundle.getString("Operator.handleAccountsCheckBox.text")); // NOI18N
        handleAccountsCheckBox.setName("handleAccountsCheckBox"); // NOI18N

        viewSalesCheckBox.setText(bundle.getString("Operator.viewSalesCheckBox.text")); // NOI18N
        viewSalesCheckBox.setName("viewSalesCheckBox"); // NOI18N

        enterProductTablesCheckBox.setText(bundle.getString("Operator.enterProductTablesCheckBox.text")); // NOI18N
        enterProductTablesCheckBox.setName("enterProductTablesCheckBox"); // NOI18N

        priceChangeCheckBox.setText(bundle.getString("Operator.priceChangeCheckBox.text")); // NOI18N
        priceChangeCheckBox.setName("priceChangeCheckBox"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(jId, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(authorityCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, 334, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(refundsCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deliveriesCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stockTakeCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(overrideDebitLimit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(acceptDebitCards, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(noSaleCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createNewStockCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enterStockCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(enterProductTablesCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cashupCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(changeCreditLimitsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(modifyOffersCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(handleOffersCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(handleOrdersCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(handleAccountsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewSalesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(modifyOperatorsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(priceChangeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authorityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterStockCheckBox)
                    .addComponent(viewSalesCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createNewStockCheckBox)
                    .addComponent(handleAccountsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noSaleCheckBox)
                    .addComponent(handleOrdersCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptDebitCards)
                    .addComponent(handleOffersCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(overrideDebitLimit)
                    .addComponent(modifyOperatorsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stockTakeCheckBox)
                    .addComponent(modifyOffersCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deliveriesCheckBox)
                    .addComponent(changeCreditLimitsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refundsCheckBox)
                    .addComponent(cashupCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterProductTablesCheckBox)
                    .addComponent(priceChangeCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void execute(String ids) {
        //show the details
        this.ids = ids;
        if (ids.isEmpty()) {//create a new record
            updating = false;
            jId.setText("");
            jDescription.setText("");
            authorityCombo.setSelectedIndex(5);
        } else {//lookup old record
            if(ids.length()>8){
                this.ids=ids.substring(7);
            }
            updating = true;
            try {
                PreparedStatement lu;
                lu = Main.getConnection().prepareStatement("SELECT Operators.* " +
                        "FROM Operators " +
                        "WHERE Operators.ID=?  " +
                        "ORDER BY Description");
                lu.setString(1, this.ids);
                ResultSet rs = lu.executeQuery();
                if (rs.last()) {
                    jId.setText(ids);
                    jDescription.setText(rs.getString("Description"));
                    authorityCombo.setSelectedIndex(rs.getInt("Authority"));
                    setBitData(rs.getInt("Pemissions"));
                } else {//
                    Audio.play("Ring");
                    return;
                }
                rs.close();
            } catch (SQLException ex) {
                Audio.play("Ring");
                Main.logger.log(Level.SEVERE, "Operator.execute ", "Exception: " + ex.getMessage());
            }
        }
        Audio.play("Tada");
        jDescription.requestFocus();
        jDescription.selectAll();
        setVisible(true);
    }
    
    private int getBitData(){
        int data=0;
       if (enterStockCheckBox.isSelected()) {//Monday
            data += 1;
        }
       if (createNewStockCheckBox.isSelected()) {//
            data += 2;
        }
       if (noSaleCheckBox.isSelected()) {//
            data += 4;
        }
       if (acceptDebitCards.isSelected()) {//
            data += 8;
        }
       if (overrideDebitLimit.isSelected()) {//
            data += 16;
        }
       if (stockTakeCheckBox.isSelected()) {//
            data += 32;
        }
       if (deliveriesCheckBox.isSelected()) {//
            data += 64;
        }
       if (refundsCheckBox.isSelected()) {//
            data += 128;
        }
       if (viewSalesCheckBox.isSelected()) {//
            data += 256;
        }
       if(handleAccountsCheckBox.isSelected()){
           data += 512;
       }
       if(handleOrdersCheckBox.isSelected()){
           data += 1024;
       }
       if(handleOffersCheckBox.isSelected()){
           data += 2048;
       }
       if(modifyOperatorsCheckBox.isSelected()){
           data += 4096;
       }
       if(modifyOffersCheckBox.isSelected()){
           data += 8192;
       }
       if(changeCreditLimitsCheckBox.isSelected()){
           data += 16384;
       }
       if(cashupCheckBox.isSelected()){
           data += 32768;
       }
       if(enterProductTablesCheckBox.isSelected()){
           data+=65536;
       }
       if(priceChangeCheckBox.isSelected()){
           data+=131072;
       }
       return data;
    }
    
    public void setPermissions(){
        try {
                PreparedStatement lu;
                lu = Main.getConnection().prepareStatement("SELECT Operators.* " +
                        "FROM Operators " +
                        "WHERE Operators.ID=?  " +
                        "ORDER BY Description");
                lu.setInt(1, operator);
                ResultSet rs = lu.executeQuery();
                if (rs.last()) {
                    jId.setText(ids);
                    jDescription.setText(rs.getString("Description"));
                    authorityCombo.setSelectedIndex(rs.getInt("Authority"));
                    data=rs.getInt("Pemissions");
                    setBitData(data);
                } else {//
                    Audio.play("Ring");
                    return;
                }
                rs.close();
            } catch (SQLException ex) {
                Audio.play("Ring");
                Main.logger.log(Level.SEVERE, "Operator.setPermissions ", "Exception: " + ex.getMessage());
            }
    }
    
    private void setBitData(int data) {
        enterStock = (data & 1) == 1;
        enterStockCheckBox.setSelected(enterStock);
        createNewStock = (data & 2) == 2;
        createNewStockCheckBox.setSelected(createNewStock);
        noSale = (data & 4) == 4;
        noSaleCheckBox.setSelected(isNoSale());
        acceptDebit = (data & 8) == 8;
        acceptDebitCards.setSelected(isAcceptDebit());
        overrideDebit = (data & 16) == 16;
        overrideDebitLimit.setSelected(isOverrideDebit());
        stockTake = (data & 32) == 32;
        stockTakeCheckBox.setSelected(isStockTake());
        deliveries = (data & 64) == 64;
        deliveriesCheckBox.setSelected(isDeliveries());
        refunds = (data & 128) == 128;
        refundsCheckBox.setSelected(isRefunds());
        viewSales = (data & 256) == 256;
        viewSalesCheckBox.setSelected(isViewSales());
        handleAccounts = (data & 512)== 512;
        handleAccountsCheckBox.setSelected(handleAccounts);
        handleOrders = (data& 1024) == 1024;
        handleOrdersCheckBox.setSelected(handleOrders);
        handleOffers = (data& 2048) == 2048;
        handleOffersCheckBox.setSelected(handleOffers);
        modifyOperators = (data&4096) == 4096;
        modifyOperatorsCheckBox.setSelected(isModifyOperators());
        modifyOffers = (data&8192) == 8192;
        modifyOffersCheckBox.setSelected(isModifyOffers());
        changeCreditLimits = (data&16384) == 16384;
        changeCreditLimitsCheckBox.setSelected(isChangeCreditLimits());
        cashup = (data & 32768) == 32768;
        cashupCheckBox.setSelected(isCashup());
        enterProductTables = (data & 65536) == 65536;
        enterProductTablesCheckBox.setSelected(isEnterProductTables());
        priceChange = (data&131072) == 131072;
        priceChangeCheckBox.setSelected(isPriceChange());
    }

        private void saveData() {
        try {
            if (updating) {
                PreparedStatement pu = Main.getConnection().prepareStatement(
                        "UPDATE Operators SET " +
                        "description=?," +
                        "Authority=?, " +
                        "Pemissions=? " +
                        "WHERE ID=? AND id!=1");
                pu.setString(1, description);
                pu.setString(2, authority);
                pu.setString(4, ids);
                pu.setInt(3, getBitData());
                pu.executeUpdate();
            } else {
                long r;
                Long s;
                Random generator = new Random();
                do {
                    r = generator.nextInt(10000) % 10000;
                    s = r;
                } while (isExisting(s.toString()));
                PreparedStatement pn = Main.getConnection().prepareStatement(
                        "INSERT INTO " +
                        "Operators " +
                        "(id,description,authority,Pemissions) VALUES(?,?,?,?)");
                pn.setLong(1, s);
                pn.setString(2, description);
                pn.setString(3, authority);
                data=getBitData();
                setBitData(data);
                pn.setInt(4, data);
                pn.executeUpdate();
            }
        } catch (SQLException ex) {
            Audio.play("Ring");
            Main.logger.log(Level.SEVERE, "Operator.saveData ", "Exception: " + ex.getMessage());
        }
        Audio.play("Beep");
    }

    private void jDescriptionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDescriptionKeyReleased
//        description = StringOps.firstCaps(jDescription.getText());
//        jDescription.setText(description);
}//GEN-LAST:event_jDescriptionKeyReleased

    private void closeButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButton2ActionPerformed
        Audio.play("Beep");
        setVisible(false);
}//GEN-LAST:event_closeButton2ActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        description = StringOps.firstCaps(jDescription.getText());
        Integer l = authorityCombo.getSelectedIndex();
        authority = l.toString();
        if (jDescription.getText().isEmpty()) {
            //set focus back to descriptionTextField
            jDescription.requestFocus();
            return;
        }
        //need to save all reults
        saveData();
        setVisible(false);
}//GEN-LAST:event_okBtnActionPerformed

    private void jPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrintButtonActionPerformed
        try {
            PrinterJob job = PrinterJob.getPrinterJob();
            job.setPrintable(this);
            if (job.printDialog()) {
                job.print();
            }
            Audio.play("Beep");
        } catch (Exception e) {
            Audio.play("Ring");
            Main.logger.log(Level.SEVERE, "Operator.print ", "Exception: " + e.getMessage());
        }
    }//GEN-LAST:event_jPrintButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Operator dialog = new Operator(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public boolean isOwnerManagerOnly() {
        return (getIntAuthority()<= 1);
    }
    
    public boolean isOwnerManager() {
        if (getIntAuthority() <= 1) {
            return true;
        }
        //allow Ownermanager to log in here
        Audio.play("TaDa");
        String pw=bundle.getString("Password");
        String s = JOptionPane.showInputDialog(null, pw);
        Main.salesScreenFunctions.setNoIncrement(true);
        if(s==null){
            return false;
        }
        s = StringOps.numericOnly(s);
       String ops = "SELECT * FROM Operators WHERE ID=? ";
        try {
            PreparedStatement operatorQuery =
                    Main.getConnection().prepareStatement(ops);
            ResultSet rs;
            long op;
            op = Long.valueOf(s);
            op -= SaleType.OPERATOR.code() * 10000;
            operatorQuery.setLong(1, op);
            rs = operatorQuery.executeQuery();
            if (rs.first()) {
                int a = rs.getInt("Authority");
                if(a<=1){
                    overriddenOperator=rs.getInt("ID");
                    overridenAuthority=a;
                    rs.close();
                    operatorOveride=true;
                    return true;
                }
            }
            Main.salesScreen.setNoIncrement(true);
            rs.close();
        } catch (Exception ex) {
            Main.logger.log(Level.SEVERE, "Operator.isOwnerManager ", "Exception: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "ops", "Exception: " + ex, JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }
    
    public boolean isOwner() {
        if (getIntAuthority() <= 0) {
            return true;
        }
        //allow Ownermanager to log in here
        Audio.play("TaDa");
        String pw=bundle.getString("Password");
        String s = JOptionPane.showInputDialog(null, pw);
        if(s==null){
            return false;
        }
        s = StringOps.numericOnly(s);
       String ops = "SELECT * FROM Operators WHERE ID=? ";
        try {
            PreparedStatement operatorQuery =
                    Main.getConnection().prepareStatement(ops);
            ResultSet rs;
            long op;
            op = Long.valueOf(s);
            op -= SaleType.OPERATOR.code() * 10000;
            operatorQuery.setLong(1, op);
            rs = operatorQuery.executeQuery();
            if (rs.first()) {
                int a = rs.getInt("Authority");
                if(a<1){
                    overriddenOperator=rs.getInt("ID");
                    rs.close();
                    operatorOveride=true;
                    return true;
                }
            }
            Main.salesScreen.setNoIncrement(true);
            rs.close();
        } catch (Exception ex) {
            Main.logger.log(Level.SEVERE, "Operator.isOwnerManager ", "Exception: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "ops", "Exception: " + ex, JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }
    
     /**
     * @return the operator
     */
    public int getOperator() {
        if(operatorOveride){
            operatorOveride=false;
            return overriddenOperator;
        }
        return operator;
    }

    /**
     * @param operator the operator to set
     */
    public void setOperator(int operator) {
        if(operator==-1){//locked out
            this.operator = -1;
            Main.operator.setIntAuthority(5);
            operatorName="";
            setBitData(0);
            operatorOveride=false;
            return;
        }
        try {
            this.operator = operator;
            String olu = "SELECT * FROM Operators WHERE ID=? ";
            PreparedStatement operatorQuery =
                    Main.getConnection().prepareStatement(olu);
            ResultSet rs;
            long op = 0;
            long operatorData =  operator;
//            op = Long.valueOf(operatorData);
//            op += SaleType.OPERATOR.code() * 10000;
            operatorQuery.setLong(1, operatorData);
            rs = operatorQuery.executeQuery();
            if (rs.first()) {
                intAuthority = rs.getInt("Authority");
                Main.operator.setIntAuthority(intAuthority);
                this.operator=rs.getInt("ID");
                operatorName = rs.getString("Description");
                data=rs.getInt("Pemissions");
                setBitData(data);
                operatorOveride=false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Operator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    boolean isSalesPerson() {
        return getIntAuthority() <= 4;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox acceptDebitCards;
    private javax.swing.JComboBox authorityCombo;
    private javax.swing.JCheckBox cashupCheckBox;
    private javax.swing.JCheckBox changeCreditLimitsCheckBox;
    private javax.swing.JButton closeButton2;
    private javax.swing.JCheckBox createNewStockCheckBox;
    private javax.swing.JCheckBox deliveriesCheckBox;
    private javax.swing.JCheckBox enterProductTablesCheckBox;
    private javax.swing.JCheckBox enterStockCheckBox;
    private javax.swing.JCheckBox handleAccountsCheckBox;
    private javax.swing.JCheckBox handleOffersCheckBox;
    private javax.swing.JCheckBox handleOrdersCheckBox;
    private javax.swing.JTextField jDescription;
    private javax.swing.JTextField jId;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jPrintButton;
    private javax.swing.JCheckBox modifyOffersCheckBox;
    private javax.swing.JCheckBox modifyOperatorsCheckBox;
    private javax.swing.JCheckBox noSaleCheckBox;
    private javax.swing.JButton okBtn;
    private javax.swing.JCheckBox overrideDebitLimit;
    private javax.swing.JCheckBox priceChangeCheckBox;
    private javax.swing.JCheckBox refundsCheckBox;
    private javax.swing.JCheckBox stockTakeCheckBox;
    private javax.swing.JCheckBox viewSalesCheckBox;
    // End of variables declaration//GEN-END:variables

    private boolean updating;
    private String authority;
    private Barcode b;
    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        try {
            if (pageIndex > 0) {
                /* We have only one page, and 'page' is zero-based */
                return NO_SUCH_PAGE;
            }
            BufferedImage img = null;
            Graphics2D g2 = (Graphics2D) graphics;
            String code="0000"+jId.getText();
            code=code.substring(code.length()-4);
            String s = "1000037" + code + "00000";
            s = s.substring(0, 11);
            b = BarcodeFactory.createCode39(s,false);
            img = BarcodeImageHandler.getImage(b);
            g2.scale(0.5,0.5);
            g2.drawImage(img, 50, 50, null);
            g2.setFont(new Font("Serif", Font.PLAIN, 20));
            g2.drawString(jDescription.getText(), 140, 145);
            /* tell the caller that this page is part of the printed document */
            return PAGE_EXISTS;
        } catch (OutputException ex) {
            Main.logger.log(Level.SEVERE, "Operator.print ", "Exception: " + ex.getMessage());
            return NO_SUCH_PAGE;
        } catch (BarcodeException ex) {
            Main.logger.log(Level.SEVERE, "Operator.print ", "Exception: " + ex.getMessage());
            return NO_SUCH_PAGE;
        }
    }

    private boolean isExisting(String r) {
        try {
            PreparedStatement lu;
            lu = Main.getConnection().prepareStatement(
                    "SELECT Operators.ID " +
                    "FROM Operators " +
                    "WHERE Operators.ID=? ");
            lu.setString(1, r);
            ResultSet rs = lu.executeQuery();
            if (rs.first()) {
                rs.close();
                return true;
            } else {//no operator
                rs.close();
                return false;
            }
        } catch (SQLException ex) {
            Audio.play("Ring");
            Main.logger.log(Level.SEVERE, "Operator.isExisting ", "Exception: " + ex.getMessage());
        }
        return false;
    }

    /**
     * @return the intAuthority
     */
    public int getIntAuthority() {
        if(operatorOveride){
            operatorOveride=false;
            return overridenAuthority;
        }
        return intAuthority;
    }

    /**
     * @param intAuthority the intAuthority to set
     */
    public void setIntAuthority(int intAuthority) {
        this.intAuthority = intAuthority;
    }

    /**
     * @return the noSale
     */
    public boolean isNoSale() {
        return noSale;
    }

    /**
     * @return the acceptDebit
     */
    public boolean isAcceptDebit() {
        return acceptDebit;
    }

    /**
     * @return the overrideDebit
     */
    public boolean isOverrideDebit() {
        return overrideDebit;
    }

    /**
     * @return the stockTake
     */
    public boolean isStockTake() {
        return stockTake;
    }

    /**
     * @return the deliveries
     */
    public boolean isDeliveries() {
        return deliveries;
    }

    /**
     * @return the refunds
     */
    public boolean isRefunds() {
        return refunds;
    }

    /**
     * @return the viewSales
     */
    public boolean isViewSales() {
        return viewSales;
    }

    /**
     * @return the modifyOperators
     */
    public boolean isModifyOperators() {
        return modifyOperators;
    }

    /**
     * @return the modifyOffers
     */
    public boolean isModifyOffers() {
        return modifyOffers;
    }

    /**
     * @return the changeCreditLimits
     */
    public boolean isChangeCreditLimits() {
        return changeCreditLimits;
    }

    /**
     * @return the cashup
     */
    public boolean isCashup() {
        return cashup;
    }

    /**
     * @return the enterProductTables
     */
    public boolean isEnterProductTables() {
        return enterProductTables;
    }

    /**
     * @return the priceChange
     */
    public boolean isPriceChange() {
        return priceChange;
    }

}
