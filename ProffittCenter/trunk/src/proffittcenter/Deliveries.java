/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Deliveries.java
 *
 * Created on 24-Apr-2010, 18:04:38
 */

package proffittcenter;

import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;

/**
 *
 * @author HP_Owner
 */
public class Deliveries extends EscapeDialog {

    ResourceBundle bundle = ResourceBundle.getBundle("proffittcenter/resource/Deliveries");
    TableColumnModel cm;
    String deliveries = " SELECT Deliveries.ID AS ID,  " +
                    "Suppliers.Description AS Supplier, " +
                    "Deliveries.WhenCreated AS Date, " +
                    "Deliveries.Reference AS Reference, " +
                    "Deliveries.Total AS Total, " +
                    "Deliveries.Tax AS Tax, " +
                    "Deliveries.Completed " +
                    "FROM Deliveries,Suppliers " +
                    "WHERE Deliveries.Supplier=Suppliers.id " +
                    "AND Deliveries.Completed=? " +
                    "ORDER BY Deliveries.WhenCreated DESC";
    private Integer delivery;
    private final MyTableCellRenderer mtcr;
    private JDBCTableModel jtm;
    private JasperPrint jasperPrint;
    private Boolean completed;
    private PreparedStatement ps;
    private int selection;
    private long barcode;
    private ResultSet rs;
    private Integer id;

    /** Creates new form Deliveries */
    public Deliveries(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        mtcr = new MyTableCellRenderer();
        jTable1.setDefaultRenderer(Money.class, mtcr);
        jTable1.setDefaultRenderer(PerCent.class, mtcr);
        jTable1.setSurrendersFocusOnKeystroke(true);
        Main.mainHelpBroker.enableHelpKey(getRootPane(), "Selectdelivery", Main.mainHelpSet);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        completedCheckBox = new javax.swing.JCheckBox();
        infoButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        barcodeTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("proffittcenter/resource/Deliveries"); // NOI18N
        setTitle(bundle.getString("title")); // NOI18N
        setName("deliveries"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPanel1FocusLost(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/print_edit.gif"))); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        completedCheckBox.setText(bundle.getString("Completed")); // NOI18N
        completedCheckBox.setName("completedCheckBox"); // NOI18N
        completedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completedCheckBoxActionPerformed(evt);
            }
        });

        infoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/Info.png"))); // NOI18N
        infoButton.setContentAreaFilled(false);
        infoButton.setName("infoButton"); // NOI18N
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/Close24.png"))); // NOI18N
        closeButton.setContentAreaFilled(false);
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/OK.png"))); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        barcodeTextField.setToolTipText(bundle.getString("tooltip")); // NOI18N
        barcodeTextField.setName("barcodeTextField"); // NOI18N
        barcodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                barcodeTextFieldFocusLost(evt);
            }
        });
        barcodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                barcodeTextFieldKeyReleased(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText(bundle.getString("Deliveries.jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(completedCheckBox)
                .addGap(29, 29, 29)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(barcodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(completedCheckBox)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(infoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(barcodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeButton, jButton1});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                        .addGap(91, 91, 91))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
                .addGap(17, 17, 17)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
}//GEN-LAST:event_closeButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        selection = jTable1.getSelectedRow();
        int numberOfRows=jTable1.getSelectedRowCount();
        if (selection < 0||numberOfRows>1) {//no selected row or more than 1
            return;
        }
        selection=jTable1.convertRowIndexToModel(selection);
        delivery = (Integer)jTable1.getModel().getValueAt(selection, 0) ;
        Main.delivery.execute(delivery);
        refresh();
    }//GEN-LAST:event_infoButtonActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        barcodeTextField.requestFocus();
        if(KeyEvent.VK_ENTER==evt.getKeyCode()){           
            selection = jTable1.getSelectedRow();
            if (selection < 0) {//no selected row
                return;
            }
            selection=jTable1.convertRowIndexToModel(selection);
            delivery = (Integer) jTable1.getModel().getValueAt(selection, 0);
            Main.delivery.execute(delivery);
        }
        //Save any Completed flags
        try {
            ps = Main.getConnection().prepareStatement("UPDATE Deliveries SET Completed=? WHERE ID = ?");
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                delivery = (Integer) jTable1.getModel().getValueAt(i, 0);
                completed = (Boolean) jTable1.getModel().getValueAt(i, 6);
                ps.setBoolean(1, completed);
                ps.setInt(2, delivery);
                ps.executeUpdate();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Deliveries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void completedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completedCheckBoxActionPerformed
        refresh();
        selection = jTable1.getSelectedRow();
    }//GEN-LAST:event_completedCheckBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        selection = jTable1.getSelectedRow();
        if (selection < 0) {//no selected row
            return;
        }
        selection = jTable1.convertRowIndexToModel(selection);
        delivery = (Integer) jTable1.getModel().getValueAt(selection, 0);
        File fc;
        int op = Main.operator.getOperator();//needed to clear temporary operator
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Map<String, Object> parameters = new HashMap<String, Object>();
        parameters.put("Delivery", delivery);
        File defaultDirectory = new JFileChooser().getFileSystemView().getDefaultDirectory();
        fc = new File(defaultDirectory.getAbsolutePath() + "/ProffittCenterReports/Delivery.jasper");
        Connection con = Main.getConnection();
        try {
            jasperPrint = JasperFillManager.fillReport(fc.getAbsolutePath(), parameters, con);
            //            JasperViewer.viewReport(jasperPrint);
            JasperPrintManager.printReport(jasperPrint, true);
        } catch (JRException ex) {
            Main.logger.log(Level.SEVERE, "SalesScreen.jMinimumStockActionPerformed " + fc, "JRException: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "JRException" + ex, "SalesScreen", JOptionPane.ERROR_MESSAGE);
        }
        Main.closeConnection();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        //Save any Completed flags
        try {            
            ps = Main.getConnection().prepareStatement("UPDATE Deliveries SET Completed=? WHERE ID = ?"); 
            for(int i=0;i<jTable1.getRowCount();i++){
                delivery = (Integer) jTable1.getValueAt(i, 0);
                completed = (Boolean) jTable1.getValueAt(i, 6);
                ps.setBoolean(1, completed);
                ps.setInt(2, delivery);
                ps.executeUpdate();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Deliveries.class.getName()).log(Level.SEVERE, null, ex);
        }
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void barcodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeTextFieldKeyReleased
        String data = barcodeTextField.getText();
        if (data.length() == 3) {
            if (Main.alphaLookup.isBarcode(data)) {
                return;
            }
            if (Main.alphaLookup.isFound(data)) {
                barcodeTextField.setText(Main.alphaLookup.returnDataIs());
            } else {
                barcodeTextField.setText("");
            }
        } else if(evt.getKeyChar()== KeyEvent.VK_ENTER){
            jTable1.requestFocus();
        }
    }//GEN-LAST:event_barcodeTextFieldKeyReleased

    private void jPanel1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusLost
        String data = barcodeTextField.getText().trim();
        if (data.isEmpty()) {
            return;
        }
        if (data.length() == 1 && (data.charAt(0) >= 'a'
                && data.charAt(0) <= 'z' || data.charAt(0) >= 'A'
                && data.charAt(0) <= 'Z')) {
            //data is a hot key
            int n = 1;//n is the multiplyer, default to 1
            data = data.toUpperCase();
            char c = data.charAt(0);
            barcode = c - 65l + 1000001;
            if (data.length() > 1) {
                try {
                    n = Integer.parseInt(data.substring(1));
                } catch (NumberFormatException ex) {
                    barcodeTextField.setText("");
                    barcodeTextField.requestFocus();
                    return;
                }
            }
            data = "" + barcode;
        }
        barcodeTextField.requestFocus();
        data=StringOps.numericOnly(data);
        if (data.isEmpty() || data.length() < 7) {
            return;
        }//8 or more digits
        try {
            barcode = Long.parseLong(data);
        } catch (NumberFormatException ex) {
            return;
        }
        if (barcode < 100000) {
            barcode = 0l;//do not leave with a value
            return;//not big enough to be a bar code
        }
        checkProduct();
        Audio.play("Beep");
        barcodeTextField.setText("");
        barcodeTextField.requestFocus();
    }//GEN-LAST:event_jPanel1FocusLost

    private void barcodeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_barcodeTextFieldFocusLost
        String data = barcodeTextField.getText().trim();
        if (data.isEmpty()) {
            return;
        }
        if (data.length() == 1 && (data.charAt(0) >= 'a'
                && data.charAt(0) <= 'z' || data.charAt(0) >= 'A'
                && data.charAt(0) <= 'Z')) {
            //data is a hot key
            int n = 1;//n is the multiplyer, default to 1
            data = data.toUpperCase();
            char c = data.charAt(0);
            barcode = c - 65l + 1000001;
            if (data.length() > 1) {
                try {
                    n = Integer.parseInt(data.substring(1));
                } catch (NumberFormatException ex) {
                    barcodeTextField.setText("");
                    barcodeTextField.requestFocus();
                    return;
                }
            }
            data = "" + barcode;
        }
        barcodeTextField.requestFocus();
        data=StringOps.numericOnly(data);
        if (data.isEmpty() || data.length() < 7) {
            return;
        }//8 or more digits
        try {
            barcode = Long.parseLong(data);
        } catch (NumberFormatException ex) {
            return;
        }
        if (barcode < 100000) {
            barcode = 0l;//do not leave with a value
            return;//not big enough to be a bar code
        }
        checkProduct();
        Audio.play("Beep");
        barcodeTextField.setText("");
        barcodeTextField.requestFocus();
    }//GEN-LAST:event_barcodeTextFieldFocusLost

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        barcodeTextField.requestFocus();
    }//GEN-LAST:event_jTable1MouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Deliveries dialog = new Deliveries(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    void execute(int supplier) {
        Audio.play("TaDa");
        completedCheckBox.setSelected(false);
        try {
            PreparedStatement ps = Main.getConnection().prepareStatement(deliveries);
            ps.setBoolean(1, completedCheckBox.isSelected());
//            ResultSet rs = ps.executeQuery();
            HashSet  editable=new HashSet();
            editable.add(6);
            jtm = new JDBCTableModel( ps, bundle, jTable1,editable);
            getRootPane().setDefaultButton(infoButton);
            barcodeTextField.requestFocus();
            setVisible(true);
        } catch (SQLException ex) {
            Audio.play("Ring");
            Logger.getLogger(Deliveries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barcodeTextField;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox completedCheckBox;
    private javax.swing.JButton infoButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private void refresh() {
         try {
            RowSorter sorter = jTable1.getRowSorter();
            PreparedStatement ps = Main.getConnection().prepareStatement(deliveries);
            ps.setBoolean(1, completedCheckBox.isSelected());
            HashSet editable = new HashSet();
            editable.add(6);
            jtm.getTableContents(ps, bundle, jTable1, editable);
            jTable1.setRowSorter(sorter);
        } catch (SQLException ex) {
            Audio.play("Ring");
            Logger.getLogger(Deliveries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void checkProduct() {
        //look up product in Packs, get ID
        jTable1.clearSelection();
        try{
            PreparedStatement findProduct = Main.getConnection().prepareStatement(
                    "SELECT Deliveries.ID FROM Deliveries,DeliveryLines WHERE DeliveryLines.Product=?  "
                    + "AND DeliveryLines.Delivery=Deliveries.ID "
                    + "ORDER BY Deliveries.ID DESC");
            findProduct.setLong(1, barcode);
            rs=findProduct.executeQuery();
            id=0;
            if(rs.next()){
                id=rs.getInt("Deliveries.ID");
            } else {
                barcodeTextField.selectAll();
                return;
            }
            rs.close();
            //select displayed line where pack id =id
            locate();
        }catch(SQLException ex) {
            Audio.play("Ring");
            Logger.getLogger(Deliveries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void locate() {
        //select displayed line where pack id =id
        int j,k;
        for (int i = 0; i < jTable1.getModel().getRowCount() - 1; i++) {
            j = (Integer) jTable1.getModel().getValueAt(i, 0);
            if (id.equals(j)) {
                k = jTable1.convertRowIndexToView(i);
                jTable1.setRowSelectionInterval(k, k);
                jTable1.scrollRectToVisible(jTable1.getCellRect(k, 0, false));
                j = i;//might need this to continue search
                break;
            }
        }
    }

}
