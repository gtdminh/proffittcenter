package proffittcenter;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.prefs.Preferences;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSpinner;
import javax.swing.JTextField;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Pack.java
 *
 * Created on 22-Jul-2009, 15:51:29
 */
/**
 *
 * @author HP_Owner
 */
public class NewPack extends EscapeDialog {

    Preferences root = Preferences.userNodeForPackage(getClass());
    private String packCode;
    private String supplier;
    private String oldPackCode = "";
    private String barcode;
    private String productTest = "Select * FROM Products WHERE ID=?";
    private long product = 0l;
    private Integer size;
    private int pack;
    private String lastBarcode = "";
    private long lastProduct = 0l;
    private int encodedProduct;
    private int encodedData;
    private boolean newPackPackSupplier;
    private int encodedPack;

    /** Creates new form Pack
     * @param parent
     * @param modal  
     */
    public NewPack(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        getRootPane().setDefaultButton(okButton);
        Main.mainHelpBroker.enableHelpKey(getRootPane(), "Supplier", Main.mainHelpSet);
    }
      
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        packCodeText = new javax.swing.JTextField();
        packSizeSpinner = new javax.swing.JSpinner();
        productField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        scanTwiceLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("proffittcenter/resource/Pack"); // NOI18N
        jTextField1.setText(bundle.getString("NewPack.jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText(bundle.getString("NewPack.jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("NewPack.title")); // NOI18N
        setName("NewPack"); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText(bundle.getString("Pack.jLabel1")); // NOI18N
        jLabel1.setFocusable(false);
        jLabel1.setName("jLabel1"); // NOI18N

        packCodeText.setEditable(false);
        packCodeText.setFocusable(false);
        packCodeText.setName("packCodeText"); // NOI18N
        packCodeText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                packCodeTextFocusLost(evt);
            }
        });

        packSizeSpinner.setName("packSizeSpinner"); // NOI18N
        packSizeSpinner.setNextFocusableComponent(productField);
        packSizeSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                packSizeSpinnerFocusGained(evt);
            }
        });

        productField.setText(bundle.getString("NewPack.productField.text")); // NOI18N
        productField.setName("productField"); // NOI18N
        productField.setNextFocusableComponent(okButton);
        productField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productFieldKeyReleased(evt);
            }
        });

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/OK.png"))); // NOI18N
        okButton.setContentAreaFilled(false);
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                okButtonFocusGained(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText(bundle.getString("NewPack.jLabel3.text")); // NOI18N
        jLabel3.setFocusable(false);
        jLabel3.setName("jLabel3"); // NOI18N

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proffittcenter/resource/Close24.png"))); // NOI18N
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        closeButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                closeButtonKeyReleased(evt);
            }
        });

        scanTwiceLabel.setText(bundle.getString("NewPack.scanTwiceLabel.text")); // NOI18N
        scanTwiceLabel.setFocusable(false);
        scanTwiceLabel.setName("scanTwiceLabel"); // NOI18N

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText(bundle.getString("NewPack.jLabel4.text")); // NOI18N
        jLabel4.setFocusable(false);
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(packSizeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(packCodeText, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(scanTwiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(productField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(packCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(packSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scanTwiceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
}//GEN-LAST:event_closeButtonActionPerformed

    private void closeButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_closeButtonKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            Audio.play("Beep");
            this.setVisible(false);
        }
}//GEN-LAST:event_closeButtonKeyReleased

    private void packCodeTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_packCodeTextFocusLost
        // see if code exists
        packCode = packCodeText.getText();
        //look up pack code
        if (packCode.compareToIgnoreCase(oldPackCode) == 0) {
            //new packCode
            oldPackCode = "";
        }
    }//GEN-LAST:event_packCodeTextFocusLost

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        ok();
        //        barcode = productField.getText();
//        barcode = StringOps.numericOnly(barcode);
//        if (barcode.isEmpty()) {
//            productField.requestFocus();
//            return;
//        }
//        //check product exists
//        try {
//            PreparedStatement np = Main.getConnection().prepareStatement(
//                    "SELECT ID FROM Products WHERE ID=? OR (ID=? AND Encoded<>0)");
//            np.setString(1, barcode);
//            np.setString(2, NewProduct.shortenForEncoded(barcode));
//            ResultSet rs = np.executeQuery();
//            if (!rs.first()) {//not recognised
//                rs.close();
//                product = Long.parseLong(barcode);
//                if (product == lastProduct) {
//                    lastProduct = 0l;
//                    if (!newProduct()) {
//                        product = Main.newProduct.execute(product, newPackPackSupplier);
//                        if (product == 0l) {
//                            productField.setText("");
//                            productField.requestFocus();
//                            AudioPlayer.play("Ring");
//                            scanTwiceLabel.setVisible(false);
//                            return;
//                        }
//                    }
//                } else {
//                    lastProduct = product;
//                    scanTwiceLabel.setVisible(true);
//                    AudioPlayer.play("Ring");
//                    productField.setText("");
//                    productField.requestFocus();
//                    rs.close();
//                    return;
//                }
//            } else {
//                barcode = rs.getString("ID");
//                rs.close();
//            }
//            // Save the new pack
//            np = Main.getConnection().prepareStatement(
//                    "INSERT INTO Packs(ID,Product,Size,Code,Encoded) VALUES(?,?,?,?,?)");
//            np.setNull(1, Types.INTEGER);//ID
//            if(barcode.isEmpty()){
//               productField.requestFocus();
//               return;
//            }
//            product=Long.parseLong(barcode);
//            np.setLong(2, product);
//            size = (Integer) packSizeSpinner.getValue();
//            np.setInt(3, size);
//            np.setString(4, packCodeText.getText());
//            np.setInt(5, encoded);
//            int executeUpdate = np.executeUpdate();
//            PreparedStatement np1 = Main.getConnection().prepareStatement(
//                    "SELECT LAST_INSERT_ID() FROM Packs");
//            rs = np1.executeQuery();
//            rs.first();
//            pack = rs.getInt(1);
//            rs.close();
//        } catch (SQLException ex) {
//            AudioPlayer.play("Ring");
//            Logger.getLogger(NewPack.class.getName()).log(Level.SEVERE, null, ex);
//            return;
//        }
//        AudioPlayer.play("Beep");
//        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

       private void ok() {
        barcode = productField.getText();
        barcode = StringOps.numericOnly(barcode);
        if (barcode.isEmpty()) {
            productField.requestFocus();
            return;
        }
        //check product exists
        try {
            PreparedStatement np = Main.getConnection().prepareStatement(
                    "SELECT ID,Encoded FROM Products WHERE ID=? OR "
                    + "SUBSTRING(ID FROM 1 FOR 7)=? AND (Encoded=1 OR Encoded=2) "
                    + "OR SUBSTRING(ID FROM 1 FOR 8)=? AND (Encoded=3 OR Encoded=4) ORDER BY ID DESC");
            np.setString(1, barcode);
            np.setString(2, NewProduct.shortenForEncoded7(barcode));
            np.setString(3, NewProduct.shortenForEncoded8(barcode));
            ResultSet rs = np.executeQuery();
            if (!rs.first()) {//not recognised
                rs.close();
                product = Long.parseLong(barcode);
                if (product == lastProduct) {
                    lastProduct = 0l;
                    if (!newProduct()) {
                        //test for encoded?
                        product = Main.newProduct.execute(product, newPackPackSupplier);
                        if (product == 0l) {
                            productField.setText("");
                            productField.requestFocus();
                            Audio.play("Ring");
                            scanTwiceLabel.setVisible(false);
                            return;
                        }
                    }
                } else {
                    lastProduct = product;
                    scanTwiceLabel.setVisible(true);
                    Audio.play("Ring");
                    productField.setText("");
                    productField.requestFocus();
                    rs.close();
                    return;
                }
            } else {
                barcode = rs.getString("ID");
                encodedProduct= rs.getInt("Encoded");
                rs.close();
            }
            // Save the new pack
            np = Main.getConnection().prepareStatement(
                    "INSERT INTO Packs(ID,Product,Size,Code,Encoded) VALUES(?,?,?,?,?)");
            np.setNull(1, Types.INTEGER);//ID
            if (barcode.isEmpty()) {
                productField.requestFocus();
                return;
            }
            product = Long.parseLong(barcode);
            np.setLong(2, product);
            size = (Integer) packSizeSpinner.getValue();
            np.setInt(3, size);
            np.setString(4, packCodeText.getText());
            np.setInt(5, encodedPack);
            int executeUpdate = np.executeUpdate();
            PreparedStatement np1 = Main.getConnection().prepareStatement(
                    "SELECT LAST_INSERT_ID() FROM Packs");
            rs = np1.executeQuery();
            rs.first();
            pack = rs.getInt(1);
            rs.close();
        } catch (SQLException ex) {
            Audio.play("Ring");
            Logger.getLogger(NewPack.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        Audio.play("Beep");
        setVisible(false);
    }
    
    private void productFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productFieldKeyReleased
        String data = productField.getText();
        if (data.length() == 3) {
            if (Main.alphaLookup.isBarcode(data)) {
                return;
            }
            if (Main.alphaLookup.isFound(data)) {
                productField.setText(Main.alphaLookup.returnDataIs());
                packSizeSpinner.requestFocus();
            } else {
                productField.setText("");
            }
        }
    }//GEN-LAST:event_productFieldKeyReleased

    private void okButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_okButtonFocusGained
        String s = productField.getText().toUpperCase();
        if (s.length() == 1 && (s.charAt(0) >= 'A' && s.charAt(0) <= 'Z')) {
            //must be a hotkey
            product = s.charAt(0) - 65 + 1000001;
            productField.setText("" + product);
        }
        ok();
    }//GEN-LAST:event_okButtonFocusGained

    private void packSizeSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_packSizeSpinnerFocusGained
//        Object src = evt.getSource();
//        System.out.println("Focus gained for : " + src);
//        if (src instanceof JFormattedTextField) // sanity check
//        {
//            System.out.println("... select all later");
//            SwingUtilities.invokeLater(new selectlater((JTextComponent) src));
//        }
    }//GEN-LAST:event_packSizeSpinnerFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NewPack dialog = new NewPack(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField packCodeText;
    private javax.swing.JSpinner packSizeSpinner;
    private javax.swing.JTextField productField;
    private javax.swing.JLabel scanTwiceLabel;
    // End of variables declaration//GEN-END:variables

    public int execute(String packCode,boolean newPackPackSupplier) {
        this.newPackPackSupplier=newPackPackSupplier;             
        packSizeSpinner.requestFocus();
        Audio.play("Tada");
        this.packCode = packCode.toUpperCase().trim();
        scanTwiceLabel.setVisible(false);
        pack = -1;
        packCodeText.setText(this.packCode);
        packSizeSpinner.setValue(1);
        productField.setText("");
        lastBarcode = "";
        pack = 0;
        //should have already excluded these
//        if (NewProduct.couldBeEncoded(this.packCode)) {
//            encodedPack = Main.selectEncoded.execute();
//            if (encodedPack != NewProduct.NOTENCODED) {
//                encodedData = NewProduct.getEncodedData4(this.packCode);
//                this.packCode = NewProduct.shortenForEncoded7(this.packCode);
//            } else {
//                encodedData = 0;
//            }
//        }
        packSizeSpinner.requestFocus();
        final JTextField tf = ((JSpinner.DefaultEditor) packSizeSpinner.getEditor()).getTextField();
        ActionListener al = new ActionListener()  {
            public void actionPerformed(ActionEvent ae) {
                tf.requestFocusInWindow();
                tf.selectAll();     
            }
        };
        int delay = Main.shop.getAutoclearMinutes();
        
        javax.swing.Timer timer = new javax.swing.Timer(delay, al);
        timer.setRepeats(false);
        timer.start();
        setVisible(true);
        return pack;
    }
    
    public int executeEncoded(String packCode, int encoded) {
        this.encodedPack = encoded;
        if (NewProduct.couldBeEncoded(packCode)) {
            Audio.play("Tada");
            this.packCode = packCode.toUpperCase().trim();
            scanTwiceLabel.setVisible(false);
            pack = -1;
            packCodeText.setText(this.packCode);
            packSizeSpinner.setValue(1);
            productField.setText(NewProduct.shortenForEncoded7(packCode));
            lastBarcode = "";
            pack = 0;
            if (encoded != NewProduct.NOTENCODE) {
                encodedData = NewProduct.getEncodedData4(this.packCode);
                this.packCode = NewProduct.shortenForEncoded7(this.packCode);
            } else {
                encodedData = 0;
            }
            productField.requestFocus();
//            setVisible(true);
            barcode = productField.getText();
        barcode = StringOps.numericOnly(barcode);
        if (barcode.isEmpty()) {
            productField.requestFocus();
            return -1;
        }
        //check product exists
        try {
            PreparedStatement np = Main.getConnection().prepareStatement(
                    "SELECT ID FROM Products WHERE ID=? "
                    + "OR SUBSTRING(ID FROM 1 FOR 7)=? AND (Encoded=1 OR Encoded=2) "
                    + "OR SUBSTRING(ID FROM 1 FOR 8)=? AND (Encoded=3 OR Encoded=4)");
            np.setString(1, barcode);
            np.setString(2, NewProduct.shortenForEncoded7(barcode));
            np.setString(3, NewProduct.shortenForEncoded8(barcode));
            ResultSet rs = np.executeQuery();
            if (!rs.first()) {
                rs.close();
                product = Long.parseLong(barcode);
                if (product == lastProduct) {
                    lastProduct = 0l;
                    if (!newProduct()) {
                        product = Main.newProduct.execute(product, newPackPackSupplier);
                        if (product == 0l) {
                            productField.setText("");
                            productField.requestFocus();
                            Audio.play("Ring");
                            scanTwiceLabel.setVisible(false);
                            return -1;
                        }
                    }
                } else {
                    lastProduct = product;
                    scanTwiceLabel.setVisible(true);
                    Audio.play("Ring");
                    productField.setText("");
                    productField.requestFocus();
                    rs.close();
                    return -1;
                }
            } else {
                barcode = rs.getString("ID");
                rs.close();
            }
            // Save the new pack
            np = Main.getConnection().prepareStatement(
                    "INSERT INTO Packs(ID,Product,Size,Code,Encoded) VALUES(?,?,?,?,?)");
            np.setNull(1, Types.INTEGER);//ID
            product = Long.parseLong(barcode);
            np.setLong(2, product);
            size = (Integer) packSizeSpinner.getValue();
            np.setInt(3, size);
            np.setString(4, packCodeText.getText());
            np.setInt(5, encoded);
            np.executeUpdate();
            PreparedStatement np1 = Main.getConnection().prepareStatement(
                    "SELECT LAST_INSERT_ID() FROM Packs");
            rs = np1.executeQuery();
            rs.first();
            pack = rs.getInt(1);
            rs.close();
        } catch (SQLException ex) {
            Audio.play("Ring");
            Logger.getLogger(NewPack.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
            return pack;
        }
        return -1;
    }

    
    
    private boolean newProduct() {
        try {
            //test to see if exists
            PreparedStatement pt = Main.getConnection().prepareStatement(productTest);
            pt.setString(1, barcode);
            ResultSet rs = pt.executeQuery();
            if (rs.first()) {
                rs.close();
                return true;
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(NewPack.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
}
